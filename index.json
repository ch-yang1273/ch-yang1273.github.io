[{"body":"","link":"https://ch-yang1273.github.io/","section":"","tags":null,"title":""},{"body":"","link":"https://ch-yang1273.github.io/tags/.gitattributes/","section":"tags","tags":null,"title":".gitattributes"},{"body":"","link":"https://ch-yang1273.github.io/categories/blog/","section":"categories","tags":null,"title":"blog"},{"body":"","link":"https://ch-yang1273.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://ch-yang1273.github.io/tags/docsy/","section":"tags","tags":null,"title":"docsy"},{"body":"","link":"https://ch-yang1273.github.io/tags/hugo/","section":"tags","tags":null,"title":"hugo"},{"body":"에러 현상 1Failed to find a valid digest in the \u0026#39;integrity\u0026#39; attribute for resource \u0026#39;https://ch-yang1273.github.io/en/js/bundle.d0a3ec7c713389a2d8c3545b99eb7e5519e045808f399e8609c37cb5f0b80fb9d0a05da289fbda3d947daee16150475f5c6d7465e3517b3a246037068d485966.js\u0026#39; with computed SHA-512 integrity \u0026#39;kh5Ntgf028JQkGf0yjXre13eHvIOr2oC13RBICwXpbXXA3Ssdnx7V9UwHhxuXQ/r/gbxnk2PIPiYqD0xsedFuw==\u0026#39;. The resource has been blocked. Build 된 Hugo site를 빌드해서 github에 올려보니 에니메이션이나 Dark mode 버튼 등이 동작하지 않았다.\n→ Local Server에서는 정상 동작했다.\n개발자모드를 켜서 보니 위와 같은 에러를 확인했다.\n“*.js” 파일이 git 으로 upload 되는 과정에서 CRLF 상태가 변해 Hash digest도 변경되는 것으로 보였다.\n해결 방법 “public/” 폴더 아래의 “*.js” 파일은 CRLF를 변경하지 않도록 “public/” 폴더에 .gitattributes 파일을 추가 했다.\n→ 길게 있지만 *.js binary 가 중요!\n“public/.gitattributes” 1## GITATTRIBUTES FOR WEB PROJECTS 2# 3# These settings are for any web project. 4# 5# Details per file setting: 6# text These files should be normalized (i.e. convert CRLF to LF). 7# binary These files are binary and should be left untouched. 8# 9# Note that binary is a macro for -text -diff. 10###################################################################### 11 12## AUTO-DETECT - Handle line endings automatically for files detected 13## as text and leave all files detected as binary untouched. 14## This will handle all files NOT defined below. 15* text=auto 16 17## SOURCE CODE 18*.bat text 19*.coffee text 20*.css text 21*.htm text 22*.html text 23*.inc text 24*.ini text 25*.js binary 26*.jsx text 27*.json text 28*.less text 29*.php text 30*.pl text 31*.py text 32*.rb text 33*.sass text 34*.scm text 35*.scss text 36*.sh text 37*.sql text 38*.styl text 39*.ts text 40*.xml text 41*.xhtml text 42 43## DOCUMENTATION 44*.markdown text 45*.md text 46*.mdwn text 47*.mdown text 48*.mkd text 49*.mkdn text 50*.mdtxt text 51*.mdtext text 52*.txt text 53AUTHORS text 54CHANGELOG text 55CHANGES text 56CONTRIBUTING text 57COPYING text 58INSTALL text 59license text 60LICENSE text 61NEWS text 62readme text 63*README* text 64TODO text 65 66## TEMPLATES 67*.dot text 68*.ejs text 69*.haml text 70*.handlebars text 71*.hbs text 72*.hbt text 73*.jade text 74*.latte text 75*.mustache text 76*.phtml text 77*.tmpl text 78 79## LINTERS 80.csslintrc text 81.eslintrc text 82.jscsrc text 83.jshintrc text 84.jshintignore text 85.stylelintrc text 86 87## CONFIGS 88*.bowerrc text 89*.cnf text 90*.conf text 91*.config text 92.editorconfig text 93.gitattributes text 94.gitconfig text 95.gitignore text 96.htaccess text 97*.npmignore text 98*.yaml text 99*.yml text 100Makefile text 101makefile text 102 103## HEROKU 104Procfile text 105.slugignore text 106 107## GRAPHICS 108*.ai binary 109*.bmp binary 110*.eps binary 111*.gif binary 112*.ico binary 113*.jng binary 114*.jp2 binary 115*.jpg binary 116*.jpeg binary 117*.jpx binary 118*.jxr binary 119*.pdf binary 120*.png binary 121*.psb binary 122*.psd binary 123*.svg text 124*.svgz binary 125*.tif binary 126*.tiff binary 127*.wbmp binary 128*.webp binary 129 130## AUDIO 131*.kar binary 132*.m4a binary 133*.mid binary 134*.midi binary 135*.mp3 binary 136*.ogg binary 137*.ra binary 138 139## VIDEO 140*.3gpp binary 141*.3gp binary 142*.as binary 143*.asf binary 144*.asx binary 145*.fla binary 146*.flv binary 147*.m4v binary 148*.mng binary 149*.mov binary 150*.mp4 binary 151*.mpeg binary 152*.mpg binary 153*.swc binary 154*.swf binary 155*.webm binary 156 157## ARCHIVES 158*.7z binary 159*.gz binary 160*.rar binary 161*.tar binary 162*.zip binary 163 164## FONTS 165*.ttf binary 166*.eot binary 167*.otf binary 168*.woff binary 169*.woff2 binary 170 171## EXECUTABLES 172*.exe binary 173*.pyc binary ","link":"https://ch-yang1273.github.io/notes/blog/2022-12-16-js-digest-%EC%97%90%EB%9F%AC/2022-12-16-js-digest-%EC%97%90%EB%9F%AC/","section":"notes","tags":["hugo",".gitattributes"],"title":"Hugo Js Digest 에러"},{"body":" Hugo 설치 참고 : https://010000.github.io/post/20191214_install_hugo_windows/\ngolang 설치\nhttps://go.dev/dl/\nMicrosoft Windows 설치 (1.19.4)\n시스템 환경 변수 Path에 “C:\\Program Files\\Go\\bin” 경로가 자동 등록되었다.\ngo version 명령어로 설치 확인\nGit 은 이미 설치되어 있음.\nHugo 설치\n공식 설치 가이드\nhttps://gohugo.io/installation/windows/\nHugo Editions가 Standard, Extended가 있는데 Extended Edition 설치를 추천\nChocolatey 아니면 Scoop 를 설치하라고 그러네? 뭐지?\n→ Windows용 패키지 매니저란다.\nChocolatey Chocolatey?\nWindows용 패키지 매니저 MS가 공식으로 제공하는 도구는 아니다. 공식 설치 가이드\nhttps://chocolatey.org/install\nPowerShell 에서 다음 명령을 수행\n1Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) 설치되어 있다. 언제 설치했는지 모르겠다… 버전 업데이트나 해주자\n관리자 권한이 필요하다네. 관리자 권한으로 다시 열어서 진행\nchoco upgrade chocolatey\n→ chocolatey v1.2.1 으로 업그레이드\nchoco를 사용해서 hugo extended edition을 설치하자 1#설치 2choco install hugo-extended 3 4#Hugo 설치 확인 (버전 및 환경 변수 확인) 5hugo env 6hugo version 설치 완료!\n새 Hugo site 생성 Document : https://gohugo.io/getting-started/quick-start/#explanation-of-commands\n이 다음부터는 PowerShell 이 아닌 cmder 를 사용해서 진행했다. (개인 취향)\n명령어를 수행한 Directory 아래 지정한 이름으로(hugo-blog) 폴더가 생성됐다.\n1C:\\2.Project\\2.github-blog 2λ hugo new -h 3Create a new content file and automatically set the date and title. 4It will guess which kind of file to create based on the path provided. 5 6You can also specify the kind with `-k KIND`. 7 8If archetypes are provided in your theme or site, they will be used. 9 10Ensure you run this within the root directory of your site. 11 12Usage: 13 hugo new [path] [flags] 14 hugo new [command] 15 16Available Commands: 17 site Create a new site (skeleton) 18 theme Create a new theme 19 20C:\\2.Project\\2.github-blog 21λ hugo new site hugo-blog 22Congratulations! Your new Hugo site is created in C:\\2.Project\\2.github-blog\\hugo-blog. 23 24Just a few more steps and you\u0026#39;re ready to go: 25 261. Download a theme into the same-named folder. 27 Choose a theme from https://themes.gohugo.io/ or 28 create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 292. Perhaps you want to add some content. You can add single files 30 with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 313. Start the built-in live server via \u0026#34;hugo server\u0026#34;. 32 33Visit https://gohugo.io/ for quickstart guide and full documentation. 테마 선택 (Docsy) Docsy : 구글에서 제공하는 Hugo Theme Docsy Document 사이트가 비슷한 모양으로 두개 있다 https://www.docsy.dev/\nhttps://deploy-preview-802--docsydocs.netlify.app/\n→ 2번 사이트는 최신화가 안되어 있다. 1번 사이트를 참고하자.\nDocsy Theme Build - 1. Use Docsy as a Hugo Module https://www.docsy.dev/docs/get-started/docsy-as-module/\nDocsy의 두가지 Build Option 두 옵션 모두 모든 종속성을 설치하기 위해 prerequisites 가이드를 따라야 한다.\n이번에는 Clone 하고 끝내는 초보자용이 아닌 숙련자용 가이드로 진행한다\nCopy and edit the source for the Docsy example site. This approach gives you a skeleton structure for your site, with top-level and documentation sections and templates that you can modify as necessary. The example site uses Docsy as a Hugo Module.\n→ 초보자용 가이드 : Start with a prepopulated site\nBuild your own site using the Docsy theme. Specify the Docsy theme like any other Hugo theme when creating or updating your site. With this option, you’ll get Docsy look and feel, navigation, and other features, but you’ll need to specify your own site structure.\n→ 숙련자용 가이드 : Start a site from scratch\nCreate a new site : Start a new site from scratch (숙련자용) 1hugo new site my-new-site 2cd my-new-site 3hugo mod init github.com/me/my-new-site 4hugo mod get github.com/google/docsy@0.6.0 5hugo mod get github.com/google/docsy/dependencies@0.6.0 6(echo [module]^ 7 8[[module.imports]]^ 9 10path = \u0026#34;github.com/google/docsy\u0026#34;^ 11 12[[module.imports]]^ 13 14path = \u0026#34;github.com/google/docsy/dependencies\u0026#34;)\u0026gt;\u0026gt;config.toml 15hugo server 설명\n[새로운 사이트 생성]\nhugo new site {이름}\n[종속성 설정]\nhugo mod init github.com/{내 github}/{이름}\nhugo mod get github.com/google/docsy@0.2.0-pre hugo mod get github.com/google/docsy/dependencies@0.2.0-pre\n→ @0.6.0-pre 는 Docsy 프로젝트의 Release버전이다.\n→ 가이드는 v0.2.0 이지만 현재 최신 버전인 v0.6.0 으로 수정해서 진행했다.\n[config.toml 수정]\necho ~\n아래 내용이 config.toml 에 추가 된다. 1[module] 2proxy = \u0026#34;direct\u0026#34; 3[[module.imports]] 4path = \u0026#34;github.com/google/docsy\u0026#34; 5[[module.imports]] 6path = \u0026#34;github.com/google/docsy/dependencies\u0026#34; [로컬 서버 실행]\nlocalhost:1313 으로 접속해서 빌드 된 서버 확인\n→ 아무것도 없는 빈 사이트가 실행된다.\nDocsy Theme Build - 2. Docsy as a Git submodule https://www.docsy.dev/docs/get-started/other-options/\nHugo Module 방식이 아닌 Git Submodule 방식은 구식이라고 한다.\n다른 Hugo Theme들이 이 방식을 사용하는 것 같아 따라해본다.\n→ 다른 Theme의 예제들을 참고하기에도 이 방법이 좋을 것 같다.\nGit submodule 이란? Document : https://git-scm.com/book/ko/v2/Git-도구-서브모듈\n1프로젝트를 수행하다 보면 다른 프로젝트를 함께 사용해야 하는 경우가 종종 있다. 함께 사용할 다른 프로젝트는 외부에서 개발한 라이브러리라던가 내부 여러 프로젝트에서 공통으로 사용할 라이브러리일 수 있다. 이런 상황에서 자주 생기는 이슈는 두 프로젝트를 서로 별개로 다루면서도 그 중 하나를 다른 하나 안에서 사용할 수 있어야 한다는 것이다. 2 3Atom 피드를 제공하는 웹사이트를 만드는 것을 예로 들어보자. Atom 피드를 생성하는 코드는 직접 작성하지 않고 라이브러리를 가져다 쓰기로 한다. 라이브러리를 사용하려면 CPAN이나 Ruby gem 같은 라이브러리 관리 도구를 사용하여 Shared 라이브러리 형태로 쓰거나 직접 라이브러리의 소스코드를 프로젝트로 복사해서 사용할 수 있다. 우선 Shared 라이브러리를 사용하기에는 문제가 있다. 프로젝트를 사용하는 모든 환경에 라이브러리가 설치되어 있어야 하고 라이브러리를 프로젝트에 맞게 약간 수정해서 사용하고 배포하기가 어렵다. 또한, 라이브러리 소스코드를 직접 프로젝트에 포함시키는 경우에는 라이브러리 Upstream 코드가 업데이트됐을 때 Merge 하기가 어렵다. 4 5Git의 서브모듈은 이런 문제를 다루는 도구다. Git 저장소 안에 다른 Git 저장소를 디렉토리로 분리해 넣는 것이 서브모듈이다. 다른 독립된 Git 저장소를 Clone 해서 내 Git 저장소 안에 포함할 수 있으며 각 저장소의 커밋은 독립적으로 관리한다. Node: Get the latest LTS release Node 버전이 최신화 안되어 있으면 build error 가 발생한다.\n에러 내용\n위에 최신화 안되어 있는 Document 사이트 보고 하다가 삽질 많이 했다. 1C:\\2.Project\\2.github-blog 2λ cd yblog\\ 3 4C:\\2.Project\\2.github-blog\\yblog 5λ git init 6 7C:\\2.Project\\2.github-blog\\yblog (master) 8λ git submodule add https://github.com/google/docsy.git themes/docsy 9Cloning into \u0026#39;C:/2.Project/2.github-blog/yblog/themes/docsy\u0026#39;... 10remote: Enumerating objects: 9084, done. 11remote: Counting objects: 100% (185/185), done. 12remote: Compressing objects: 100% (104/104), done. 13remote: Total 9084 (delta 103), reused 123 (delta 68), pack-reused 8899R 14Resolving deltas: 100% (5644/5644), done. MiB | 7.62 MiB/s, done. 15warning: LF will be replaced by CRLF in .gitmodules. 16The file will have its original line endings in your working directory 17 18C:\\2.Project\\2.github-blog\\yblog (master) 19λ hugo server 20Start building sites … 21hugo v0.108.0-a0d64a46e36dd2f503bfd5ba1a5807b900df231d+extended windows/amd64 BuildDate=2022-12-06T13:37:56Z VendorInfo=gohugoio 22ERROR 2022/12/13 19:38:54 render of \u0026#34;home\u0026#34; failed: \u0026#34;C:\\2.Project\\2.github-blog\\yblog\\themes\\docsy\\layouts\\_default\\baseof.html:16:7\u0026#34;: execute of template failed: template: home.html:16:7: executing \u0026#34;home.html\u0026#34; at \u0026lt;partialCached \u0026#34;scripts.html\u0026#34; .\u0026gt;: error calling partialCached: \u0026#34;C:\\2.Project\\2.github-blog\\yblog\\themes\\docsy\\layouts\\partials\\scripts.html:82:30\u0026#34;: execute of template failed: template: partials/scripts.html:82:30: executing \u0026#34;partials/scripts.html\u0026#34; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: slice []interface {} not supported in concat 23ERROR 2022/12/13 19:38:54 render of \u0026#34;taxonomy\u0026#34; failed: \u0026#34;C:\\2.Project\\2.github-blog\\yblog\\themes\\docsy\\layouts\\_default\\baseof.html:16:7\u0026#34;: execute of template failed: template: _default/terms.html:16:7: executing \u0026#34;_default/terms.html\u0026#34; at \u0026lt;partialCached \u0026#34;scripts.html\u0026#34; .\u0026gt;: error calling partialCached: \u0026#34;C:\\2.Project\\2.github-blog\\yblog\\themes\\docsy\\layouts\\partials\\scripts.html:82:30\u0026#34;: execute of template failed: template: partials/scripts.html:82:30: executing \u0026#34;partials/scripts.html\u0026#34; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: slice []interface {} not supported in concat 24ERROR 2022/12/13 19:38:54 failed to render pages: render of \u0026#34;taxonomy\u0026#34; failed: \u0026#34;C:\\2.Project\\2.github-blog\\yblog\\themes\\docsy\\layouts\\_default\\baseof.html:16:7\u0026#34;: execute of template failed: template: _default/terms.html:16:7: executing \u0026#34;_default/terms.html\u0026#34; at \u0026lt;partialCached \u0026#34;scripts.html\u0026#34; .\u0026gt;: error calling partialCached: \u0026#34;C:\\2.Project\\2.github-blog\\yblog\\themes\\docsy\\layouts\\partials\\scripts.html:82:30\u0026#34;: execute of template failed: template: partials/scripts.html:82:30: executing \u0026#34;partials/scripts.html\u0026#34; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: slice []interface {} not supported in concat 25Error: Error building site: TOCSS: failed to transform \u0026#34;scss/main.scss\u0026#34; (text/x-scss): \u0026#34;C:\\2.Project\\2.github-blog\\yblog\\themes\\docsy\\assets\\scss\\main.scss:6:1\u0026#34;: File to import not found or unreadable: ../vendor/bootstrap/scss/bootstrap. 26Built in 38 ms 나는 Chocolatey가 설치되어 있으니 choco 명령어를 사용해서 업그레이드\n1#버전 확인 2node -v 3 4#nodejs-lts 업그레이드 5choco upgrade nodejs-lts 6 7#공식 문서에는 아래 명령을 사용했다. 8nvm install --lts For an existing site themes/docsy 경로에 submodule이 들어온다.\n1cd hugo-blog 2git init 3 4git submodule add --depth 1 https://github.com/google/docsy.git themes/docsy config.toml 수정\n1#windows가 문제인지 아래 명령을 수행하면 작은 따옴표까지 삽입된다. 2echo \u0026#39;theme = \u0026#34;docsy\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml 3 4#그냥 config.toml 을 에디터로 열고 아래에 내용을 직접 삽입해줬다. 5theme = \u0026#34;docsy\u0026#34; Docsy 종속성 설치\n1cd themes/docsy 2npm install Install PostCSS\n이 내용이 Document에 “hugo new site myproject” 명령 수행 전에 있어서 삽질 좀 했다. 프로젝트 root에서 수행한다. “node_modules”아래 모듈이 설치된다. (package.json도 생성된다.) 1npm install --save-dev autoprefixer postcss-cli postcss (편의. Optional) npm scripts 수정\n프로젝트 root에 있는 “package.json”에 아래 노란색 내용을 추가한다. 프로젝트 root에서 “npm install”을 수행하면 docsy가 최신버전으로 업데이트 된다. 1{ 2 \u0026#34;devDependencies\u0026#34;: { 3 \u0026#34;autoprefixer\u0026#34;: \u0026#34;^10.4.13\u0026#34;, 4 \u0026#34;postcss\u0026#34;: \u0026#34;^8.4.20\u0026#34;, 5 \u0026#34;postcss-cli\u0026#34;: \u0026#34;^10.1.0\u0026#34; 6 }, 7 \u0026#34;scripts\u0026#34;: { 8 \u0026#34;get:submodule\u0026#34;: \u0026#34;git submodule update --init --depth 1\u0026#34;, 9 \u0026#34;_prepare:docsy\u0026#34;: \u0026#34;cd themes/docsy \u0026amp;\u0026amp; npm install\u0026#34;, 10 \u0026#34;prepare\u0026#34;: \u0026#34;npm run get:submodule \u0026amp;\u0026amp; npm run _prepare:docsy\u0026#34; 11 } 12} Local Server 실행\nlocalhost:1313 으로 접속하면 된다. 1#hugo serve/server 다 되더라 2hugo serve 여기까지 하고 Commit 전에 .gitignore 추가 후 Commit\n.gitignore\nhttps://github.com/google/docsy-example 에서 가져왔다. 1/public 2resources/ 3node_modules/ 4package-lock.json 5.hugo_build.lock 이후 부터는 2. Docsy as a Git submodule 방식으로 진행)\nBasic Site Configuration 아래 example 의 config.toml 을 Copy 하는 것을 추천한다.\nhttps://github.com/google/docsy-example/blob/master/config.toml\ntheme = \u0026quot;docsy” 는 없길래 따로 세번째 줄에 추가했다. (중요!)\n→ docsy-example 은 hugo module을 방식이여서 그런지 theme, baseURL 설정이 안되어 있다.\n아래 쪽에 있는 hugo module config 제외\n최종 Basic config.toml\n1baseURL = \u0026#34;/\u0026#34; 2title = \u0026#34;Goldydocs\u0026#34; 3theme = \u0026#34;docsy\u0026#34; 4 5# Language settings 6contentDir = \u0026#34;content/en\u0026#34; 7defaultContentLanguage = \u0026#34;en\u0026#34; 8defaultContentLanguageInSubdir = false 9# Useful when translating. 10enableMissingTranslationPlaceholders = true 11 12enableRobotsTXT = true 13 14# Will give values to .Lastmod etc. 15enableGitInfo = true 16 17# Comment out to enable taxonomies in Docsy 18# disableKinds = [\u0026#34;taxonomy\u0026#34;, \u0026#34;taxonomyTerm\u0026#34;] 19 20# You can add your own taxonomies 21[taxonomies] 22tag = \u0026#34;tags\u0026#34; 23category = \u0026#34;categories\u0026#34; 24 25[params.taxonomy] 26# set taxonomyCloud = [] to hide taxonomy clouds 27taxonomyCloud = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] 28 29# If used, must have same length as taxonomyCloud 30taxonomyCloudTitle = [\u0026#34;Tag Cloud\u0026#34;, \u0026#34;Categories\u0026#34;] 31 32# set taxonomyPageHeader = [] to hide taxonomies on the page headers 33taxonomyPageHeader = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] 34 35# Highlighting config 36pygmentsCodeFences = true 37pygmentsUseClasses = false 38# Use the new Chroma Go highlighter in Hugo. 39pygmentsUseClassic = false 40#pygmentsOptions = \u0026#34;linenos=table\u0026#34; 41# See https://help.farbox.com/pygments.html 42pygmentsStyle = \u0026#34;tango\u0026#34; 43 44# Configure how URLs look like per section. 45[permalinks] 46blog = \u0026#34;/:section/:year/:month/:day/:slug/\u0026#34; 47 48# Image processing configuration. 49[imaging] 50resampleFilter = \u0026#34;CatmullRom\u0026#34; 51quality = 75 52anchor = \u0026#34;smart\u0026#34; 53 54[services] 55[services.googleAnalytics] 56# Comment out the next line to disable GA tracking. Also disables the feature described in [params.ui.feedback]. 57id = \u0026#34;UA-00000000-0\u0026#34; 58 59# Language configuration 60 61[languages] 62[languages.en] 63title = \u0026#34;Goldydocs\u0026#34; 64description = \u0026#34;A Docsy example site\u0026#34; 65languageName =\u0026#34;English\u0026#34; 66# Weight used for sorting. 67weight = 1 68[languages.no] 69title = \u0026#34;Goldydocs\u0026#34; 70description = \u0026#34;Docsy er operativsystem for skyen\u0026#34; 71languageName =\u0026#34;Norsk\u0026#34; 72contentDir = \u0026#34;content/no\u0026#34; 73time_format_default = \u0026#34;02.01.2006\u0026#34; 74time_format_blog = \u0026#34;02.01.2006\u0026#34; 75 76[languages.fa] 77title = \u0026#34;اسناد گلدی\u0026#34; 78description = \u0026#34;یک نمونه برای پوسته داکسی\u0026#34; 79languageName =\u0026#34;فارسی\u0026#34; 80contentDir = \u0026#34;content/fa\u0026#34; 81time_format_default = \u0026#34;2006.01.02\u0026#34; 82time_format_blog = \u0026#34;2006.01.02\u0026#34; 83 84[markup] 85 [markup.goldmark] 86 [markup.goldmark.renderer] 87 unsafe = true 88 [markup.highlight] 89 # See a complete list of available styles at https://xyproto.github.io/splash/docs/all.html 90 style = \u0026#34;tango\u0026#34; 91 # Uncomment if you want your chosen highlight style used for code blocks without a specified language 92 # guessSyntax = \u0026#34;true\u0026#34; 93 94# Everything below this are Site Params 95 96# Comment out if you don\u0026#39;t want the \u0026#34;print entire section\u0026#34; link enabled. 97[outputs] 98section = [\u0026#34;HTML\u0026#34;, \u0026#34;print\u0026#34;, \u0026#34;RSS\u0026#34;] 99 100[params] 101copyright = \u0026#34;The Docsy Authors\u0026#34; 102privacy_policy = \u0026#34;https://policies.google.com/privacy\u0026#34; 103 104# First one is picked as the Twitter card image if not set on page. 105# images = [\u0026#34;images/project-illustration.png\u0026#34;] 106 107# Menu title if your navbar has a versions selector to access old versions of your site. 108# This menu appears only if you have at least one [params.versions] set. 109version_menu = \u0026#34;Releases\u0026#34; 110 111# Flag used in the \u0026#34;version-banner\u0026#34; partial to decide whether to display a 112# banner on every page indicating that this is an archived version of the docs. 113# Set this flag to \u0026#34;true\u0026#34; if you want to display the banner. 114archived_version = false 115 116# The version number for the version of the docs represented in this doc set. 117# Used in the \u0026#34;version-banner\u0026#34; partial to display a version number for the 118# current doc set. 119version = \u0026#34;0.0\u0026#34; 120 121# A link to latest version of the docs. Used in the \u0026#34;version-banner\u0026#34; partial to 122# point people to the main doc site. 123url_latest_version = \u0026#34;https://example.com\u0026#34; 124 125# Repository configuration (URLs for in-page links to opening issues and suggesting changes) 126github_repo = \u0026#34;https://github.com/google/docsy-example\u0026#34; 127# An optional link to a related project repo. For example, the sibling repository where your product code lives. 128github_project_repo = \u0026#34;https://github.com/google/docsy\u0026#34; 129 130# Specify a value here if your content directory is not in your repo\u0026#39;s root directory 131# github_subdir = \u0026#34;\u0026#34; 132 133# Uncomment this if your GitHub repo does not have \u0026#34;main\u0026#34; as the default branch, 134# or specify a new value if you want to reference another branch in your GitHub links 135github_branch= \u0026#34;master\u0026#34; 136 137# Google Custom Search Engine ID. Remove or comment out to disable search. 138gcs_engine_id = \u0026#34;d72aa9b2712488cc3\u0026#34; 139 140# Enable Algolia DocSearch 141algolia_docsearch = false 142 143# Enable Lunr.js offline search 144offlineSearch = false 145 146# Enable syntax highlighting and copy buttons on code blocks with Prism 147prism_syntax_highlighting = false 148 149# User interface configuration 150[params.ui] 151# Set to true to disable breadcrumb navigation. 152breadcrumb_disable = false 153# Set to true to disable the About link in the site footer 154footer_about_disable = false 155# Set to false if you don\u0026#39;t want to display a logo (/assets/icons/logo.svg) in the top navbar 156navbar_logo = true 157# Set to true if you don\u0026#39;t want the top navbar to be translucent when over a `block/cover`, like on the homepage. 158navbar_translucent_over_cover_disable = false 159# Enable to show the side bar menu in its compact state. 160sidebar_menu_compact = false 161# Set to true to hide the sidebar search box (the top nav search box will still be displayed if search is enabled) 162sidebar_search_disable = false 163 164# Adds a H2 section titled \u0026#34;Feedback\u0026#34; to the bottom of each doc. The responses are sent to Google Analytics as events. 165# This feature depends on [services.googleAnalytics] and will be disabled if \u0026#34;services.googleAnalytics.id\u0026#34; is not set. 166# If you want this feature, but occasionally need to remove the \u0026#34;Feedback\u0026#34; section from a single page, 167# add \u0026#34;hide_feedback: true\u0026#34; to the page\u0026#39;s front matter. 168[params.ui.feedback] 169enable = true 170# The responses that the user sees after clicking \u0026#34;yes\u0026#34; (the page was helpful) or \u0026#34;no\u0026#34; (the page was not helpful). 171yes = \u0026#39;Glad to hear it! Please \u0026lt;a href=\u0026#34;https://github.com/USERNAME/REPOSITORY/issues/new\u0026#34;\u0026gt;tell us how we can improve\u0026lt;/a\u0026gt;.\u0026#39; 172no = \u0026#39;Sorry to hear that. Please \u0026lt;a href=\u0026#34;https://github.com/USERNAME/REPOSITORY/issues/new\u0026#34;\u0026gt;tell us how we can improve\u0026lt;/a\u0026gt;.\u0026#39; 173 174# Adds a reading time to the top of each doc. 175# If you want this feature, but occasionally need to remove the Reading time from a single page, 176# add \u0026#34;hide_readingtime: true\u0026#34; to the page\u0026#39;s front matter 177[params.ui.readingtime] 178enable = false 179 180[params.links] 181# End user relevant links. These will show up on left side of footer and in the community page if you have one. 182[[params.links.user]] 183 name = \u0026#34;User mailing list\u0026#34; 184 url = \u0026#34;https://example.org/mail\u0026#34; 185 icon = \u0026#34;fa fa-envelope\u0026#34; 186 desc = \u0026#34;Discussion and help from your fellow users\u0026#34; 187[[params.links.user]] 188 name =\u0026#34;Twitter\u0026#34; 189 url = \u0026#34;https://example.org/twitter\u0026#34; 190 icon = \u0026#34;fab fa-twitter\u0026#34; 191 desc = \u0026#34;Follow us on Twitter to get the latest news!\u0026#34; 192[[params.links.user]] 193 name = \u0026#34;Stack Overflow\u0026#34; 194 url = \u0026#34;https://example.org/stack\u0026#34; 195 icon = \u0026#34;fab fa-stack-overflow\u0026#34; 196 desc = \u0026#34;Practical questions and curated answers\u0026#34; 197# Developer relevant links. These will show up on right side of footer and in the community page if you have one. 198[[params.links.developer]] 199 name = \u0026#34;GitHub\u0026#34; 200 url = \u0026#34;https://github.com/google/docsy\u0026#34; 201 icon = \u0026#34;fab fa-github\u0026#34; 202 desc = \u0026#34;Development takes place here!\u0026#34; 203[[params.links.developer]] 204 name = \u0026#34;Slack\u0026#34; 205 url = \u0026#34;https://example.org/slack\u0026#34; 206 icon = \u0026#34;fab fa-slack\u0026#34; 207 desc = \u0026#34;Chat with other project developers\u0026#34; 208[[params.links.developer]] 209 name = \u0026#34;Developer mailing list\u0026#34; 210 url = \u0026#34;https://example.org/mail\u0026#34; 211 icon = \u0026#34;fa fa-envelope\u0026#34; 212 desc = \u0026#34;Discuss development issues around the project\u0026#34; 213 214# hugo module configuration 215# - It was excluded because it uses \u0026#34;Git submodule\u0026#34;. 216#[module] 217 # uncomment line below for temporary local development of module 218 # replacements = \u0026#34;github.com/google/docsy -\u0026gt; ../../docsy\u0026#34; 219# [module.hugoVersion] 220# extended = true 221# min = \u0026#34;0.75.0\u0026#34; 222# [[module.imports]] 223# path = \u0026#34;github.com/google/docsy\u0026#34; 224# disable = false 225# [[module.imports]] 226# path = \u0026#34;github.com/google/docsy/dependencies\u0026#34; 227# disable = false 다시 hugo server 실행\nPublish Site (Github) Github 레포지토리 생성 Build Project Repository : {any} publish site Repository : {username}.github.io 1[Example] 2//1 3hugo-blog 4//2 5ch-yang1273.github.io Git repository 연결 Hugo site build 프로젝트 Repository 연결\n1# git remote add origin http://github.com/{username}/{any}.git 2git remote add origin http://github.com/ch-yang1273/hugo-blog.git Build 된 Site Repository 연결\nBuild 된 Site는 public 폴더에 생성된다. 1# git submodule add -b master https://github.com/{username}/{username}.github.io.git public 2git submodule add -b master https://github.com/ch-yang1273/ch-yang1273.github.io.git public 에러 내용 (무시)\n1C:\\2.Project\\2.github-blog\\hugo-blog (master) 2λ git submodule add -b master https://github.com/ch-yang1273/ch-yang1273.github.io.git public 3Cloning into \u0026#39;C:/2.Project/2.github-blog/hugo-blog/public\u0026#39;... 4warning: You appear to have cloned an empty repository. 5fatal: \u0026#39;origin/master\u0026#39; is not a commit and a branch \u0026#39;master\u0026#39; cannot be created from it 6Unable to checkout submodule \u0026#39;public\u0026#39; config.toml 의 baseURL 수정 접속할 URL로 수정\n1# baseURL = \u0026#34;https://{username}.github.io/\u0026#34; 2baseURL = \u0026#34;https://ch-yang1273.github.io/\u0026#34; Build Site publish 할 site 가 public 폴더에 생성된다.\n→ 빌드 후 Project root 에서 git status를 확인해보면 public 폴더는 변경사항이 제외되어 있다.\n1#hugo 나 hugo -t docsy 모두 똑같이 빌드되었다. 2hugo -t docsy Github에 Build Project 와 Publish Site 를 push public 폴더(publish site) 먼저해야 한다.\n→ build project 부터 진행하면 git add . 부터 실패한다.\n1C:\\2.Project\\2.github-blog\\hugo-blog\\public (master -\u0026gt; origin) 2λ git add . 3 4C:\\2.Project\\2.github-blog\\hugo-blog\\public (master -\u0026gt; origin) 5λ git commit -m \u0026#34;first\u0026#34; 6 7C:\\2.Project\\2.github-blog\\hugo-blog\\public (master -\u0026gt; origin) 8λ git push 그 다음으로 Build Project 를 push\n1C:\\2.Project\\2.github-blog\\hugo-blog (master) 2λ git add . 3 4C:\\2.Project\\2.github-blog\\hugo-blog (master) 5λ git commit -m \u0026#34;first\u0026#34; 6 7C:\\2.Project\\2.github-blog\\hugo-blog (master) 8λ git push Publish 완료 브라우저에서 https://{username}.github.io/\n1https://ch-yang1273.github.io/ 결과 이미지\n업로드 자동화 참고 : Hugo와 Github page로 블로그 구축 | 고운소리의 블로그 (gowoonsori.com)\nbash script\n1#!/bin/bash 2 3# Build the project. 4hugo -t \u0026lt;테마이름\u0026gt; 5 6# github.io 레포 push위해 파일 경로 이동 7cd public 8# 충돌 방지를 위해 한번 pull 9git pull origin master 10 11# git내용들 추가 12git add . 13 14# Commit 바꾸기. git commit -m \u0026#34;원하는 커밋 메세지\u0026#34;를 입력하거나 15# git commit만 입력시 커밋날짜를 메세지로 자동설정 16msg=\u0026#34;rebuilding site `date`\u0026#34; 17if [ $# -eq 1 ] 18 then msg=\u0026#34;$1\u0026#34; 19fi 20git commit -m \u0026#34;$msg\u0026#34; 21 22# github.io 레포에 push 23git push origin master 24 25# 상위 폴더인 blog도 push위해 경로 변경 26cd .. 27 28# blog 저장소 Commit \u0026amp; Push 29# 충돌 방지를 위해 한번 pull 30git pull origin master 31git add . 32 33msg=\u0026#34;rebuilding site `date`\u0026#34; 34if [ $# -eq 1 ] 35 then msg=\u0026#34;$1\u0026#34; 36fi 37git commit -m \u0026#34;$msg\u0026#34; 38 39git push origin master ","link":"https://ch-yang1273.github.io/posts/blog/2022-12-16-hugo%EB%B8%94%EB%A1%9C%EA%B7%B8/2022-12-16-hugo%EB%B8%94%EB%A1%9C%EA%B7%B8/","section":"posts","tags":["hugo","docsy"],"title":"Hugo 블로그"},{"body":"","link":"https://ch-yang1273.github.io/notes/","section":"notes","tags":null,"title":"Notes"},{"body":"","link":"https://ch-yang1273.github.io/posts/","section":"posts","tags":null,"title":"Posts"},{"body":"","link":"https://ch-yang1273.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://ch-yang1273.github.io/tags/exception/","section":"tags","tags":null,"title":"Exception"},{"body":"","link":"https://ch-yang1273.github.io/categories/java/","section":"categories","tags":null,"title":"Java"},{"body":" 참고 : Exception log practical_coding_guide, 예외와 로그 코딩 실용 가이드 항상 성가셨던 고민들 예외는 잡았는데, 로그를 남겨야 하나? 로그 레벨은? 어떤 예외 클래스로? 예외 메시지에는 어떤 값을? 예외의 로그를 어디서? 아무데나?\n로그 중복\n로그 누락\n로그 위치가 고민되면 안된다. (이미 정해져 있어야 한다)\n단순화하면, 예외가 발생한 이쪽과 저쪽(던짐)은 구분이 된다.\n발생한 예외를 던지기 전에 로그를 남긴다. 정상 상황으로 처리한 곳에서 로그를 남긴다. 로그 레벨 - 애매한 상황 사용자의 입력이 잘못되어 발생한 예외 예외는 발생했지만, 정말 예외 상황은 아니다. warn 수준도 아니다. debug 정도는 괜찮겠다. 대신 로그 설정이 가능하도록 별개의 로거가 있어야. 로깅 내용은 알아볼 수 있게 System.out.println() 은 사용하지 말자\n수 많은 로그에도 무엇인지 알 수 있어야 한다.\n1//값만으로는 파악이 안된다. 2log.debug(userId); 3 4//개선 5log.debug(\u0026#34;userId={}\u0026#34;, userId); 엔티티 전체를 로그로 찍자\n1//속성 이름은 변경되고 추가되고 삭제된다. 하지만 로깅 코드는 변하지 않는다. 2log.debug(\u0026#34;userId={}\u0026#34;, userId); 3 4//개선 (이를 위해 toString()이 구현되어야 한다.) 5log.debug(\u0026#34;request={}\u0026#34;, request); 로그 양에 겁먹지 말자 로그의 목적은 문제 파악이다. debug 로그가 많은 것은 단지 레벨 설정으로 처리된다. 한 건의 로그는 한번에 여러 개의 로그가 한번에 모여서 찍힌다는 보장은 없다. multi thread 상황에서는 더욱 그렇다. ","link":"https://ch-yang1273.github.io/posts/java/2022-12-09-%EC%98%88%EC%99%B8%EC%99%80-%EB%A1%9C%EA%B7%B8-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C-2%EC%9E%84%EB%8F%84%ED%98%95/2022-12-09-%EC%98%88%EC%99%B8%EC%99%80-%EB%A1%9C%EA%B7%B8-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C-2%EC%9E%84%EB%8F%84%ED%98%95/","section":"posts","tags":["Exception"],"title":"예외와 로그 실용 가이드 - 2 (임도형)"},{"body":" 참고 : 예외처리가이드 예외의 종류? 예측 가능한 예외\n예측 가능하지 않은 예외\n예측 가능한 예외 예측 가능한 만큼 처리 자체가 개발의 일부이다. Example 로그인이 실패했다. DB에 레코드가 없다. 파일을 찾을 수 없다. 예측 가능하지 않은 예외 버그 아니면 시스템 환경에 기인한다. 실시간 처리는 불가능하다. 대신 개선해야 한다. 예외 처리가 제대로 되지 않으면? 문제가 발생해도 로그를 보지 않는다. 로그가 중복되거나 누락 로그에 도움 되는 내용이 없다. 시스템 개선 한번 발생한 예측하지 못하는 상황이 다시 발생하지 않도록 하는 것\n→ 다시 발생하지 않도록 한다.\n→ 발생해도 예측 가능하게 한다.\n오로지 로그에 의존한다. 로그는 예외에 의존한다.\n예외 잡을 때의 가이드 먹지 말자 정보를 누락하지 말자 Guide : 예외를 잡았으면 처리하라. 게으르지 말자\n다음과 같은 코드는 절대 있어선 안 된다. (잡았으면 무언가 해야 한다)\n1Try { 2 ... 3} catch (SomeException e) { 4 // TODO Auto-generated catch block 5 e.printStackTrace(); 6} 예외를 잡아서 Console로 출력하면 되는 경우는 거의 없다,\n컴파일 된다고 코딩이 끝난 것이 아니다.\n어떻게 처리할 지 모른다면 잡지 말자.\n잡은 후의 유형\n처리하고 예외 상황 종료\n→ 절대적으로 로그는 남겨야 한다.\n다시 던진다.\n→ 로그를 위해 메시지만 보고 다시 던진다.\n→ 메시지를 변경하는 것은 바람직하지 않다.\n새 예외로 던진다.\n→ 세세한 예외를 더 추상화 된 예외로 던질 경우\n→ 이 예외를 받은 쪽에서는 Cause 예외만으로는 정보가 부족하다.\n무시한다.\n→ 더 해볼 것이 없는 경우\n→ 이 경우 로그조차 필요 없는 경우이다.\nGuide : 예외를 처리했으면 로그를 남겨라 로그도 없고 처리도 안함 → 최악\n→ 차라리 안 잡는 것이 낫다.\n처리는 했는데 로그가 없다 → 아주 나쁨\n→ 예외가 발생한 상황을 먹어버렸다.\n→ 시스템을 개선할 여지가 없다.\n로그 유형\nBad Example\n1//있으나 마나한 한심한 로그 XX 2\u0026#34;Exception Occurred\u0026#34; 3 4//무심한 로그. 감으로 에러를 예상해야 한다. 5\u0026#34;IOException Occurred\u0026#34; 6 7//당연한 로그 8\u0026#34;IOException Occurred. message=\u0026#34;socket read failed\u0026#34;\u0026#34; Example\n1//친절한 로그 (상황을 알려주어야 한다) 2\u0026#34;second data reading failed. cause=[IOException, message=\u0026#34;socket read failed.\u0026#34;]\u0026#34; 3 4//충분한 로그 5\u0026#34;second data reading failed. cause=IOException, message=\u0026#34;socket read failed.\u0026#34;], peer=“10.10.10.13”, port=1234, auth=“base123”, thread=32\u0026#34; Guide : 원 예외의 정보 누락 금지 예외의 목적은? → 개선 절대 잡은 예외의 정보를 누락하지 말자. Cause로 설정하라. 위의 예외가 발생한 상황의 로그를 먹지 말라는 내용과 같다. Guide : java.lang의 추상 예외로 잡지 말자. 피해야 할 추상 예외\n→ Throwable, Error, Exception, RuntimeException\n예외 클래스는 그 이름만으로도 정보를 제공한다.\n어떤 코드를 넣어도 컴파일 되고, 어떤 예외도 잡힌다.\n→ 예외 처리 방법이 한 가지가 아니라면 언젠가는 세세한 예외로 나누게 될 것이다.\nGuide : 외부와의 Interface 에서는 RuntimeException 도 잡아라. RuntimeException 은 따로 catch 하지 않아도 컴파일이 된다.\n그런데 RuntimeException 이 발생했다는 것은 버그가 있다는 것이다.\nex) NullPointerException 이 발생했으면 null 체크를 제대로 하지 않을 것이다. 버그다.\n버그는 발생할 수도 있다. 하지만 로그가 없으면 잡기 힘들다.\n여기에서의 인터페이스는 외부에서 호출하는 경계를 의미\n→ 시스템, 컴포넌트, 패키지\nGuide : 하나의 Try 블록은 적당한 크기를 유지하라. try 블록이 너무 크면 Catch한 예외를 어디서 던졌는지 눈으로 안 보인다.\n같은 예외를 여러 곳에서 던지는 경우, 처리 방법이 다를 수도 있다.\n블록이 30 Line을 넘지 않도록 하자.\n→ 어쩔 수 없이 넘는다면, 예외와는 별개로 새로운 메소드로 뽑는 리팩터링을 고려\n예외를 던질 때의 가이드 메시지를 충실하게 잡을 곳을 기준으로 예외 객체 선택 메시지를 파싱하게 하지 말자 추상 예외로 던지지 말자 Guide : 예외를 던질 때는 반드시 message를 충실하게 작성한다. 메시지는 충실하게\n예외를 왜 던질까? 바라던 행위를 스스로 할 수 없기 때문이다. 밖의 누군가가 처리하라고 던진다. 던진 예외를 잡아서 처리할 수 있을 만큼 충분한 정보를 제공해야 한다. 정보가 적다면, 예외를 잡아도 처리할 수 없다. 메시지를 왜?\n메시지가 자세하지 않아도 처리는 할 수 있다. (시간이 오래 걸릴 뿐) 로그에 가장 좋은 내용은 예외 메시지이다. 정말 필요 없을 수도 있지만, 대부분의 필요한 경우니까 작성하는 습관을 갖기 위해 작성하자. 예외 자체만으로도 정보를 얻을 수 있다\nException 클래스 이름 발생한 클래스와 메서드 이름 호출한 Stack 메시지에 따른 유지보수의 차이\n메시지가 충실하다면 로그 파일로 상황을 파악하고 재현하고 버그 패치하고 시스템에 배치하고 버그 패치만 확인하고 메시지가 부실하다면 로그 파일을 보고 상황을 짐작하고 짐작을 확인하기 위한 로그 코드를 추가하고 시스템에 배치하고 맞으면 버그 패치하고 시스템에 배치하고 로그 남기는 코딩을 다시 삭제하고 다시 올리고 Guide : 외부에서 예외를 Catch하여 처리할 상황을 기준으로 던질 예외 선택 예외를 그대로 던질까 하나로 던질까? 각 예외 별로 처리 방법이 다를 경우 그대로 던진다 예외가 뭐였든 간에 처리 방법이 동일하면 하나의 예외로 던진다 Guide : 메시지를 파싱하게 하지 말자. 메시지는 예외를 처리할 수 있을 만큼 상세해야 한다 그렇다고 예외 메시지를 파싱해서 정보를 추출하게 하지 말자 이러한 경우 예외 클래스에 이러한 정보를 담을 속성을 추가하자 (Ex : code) 혹은 별개의 예외로 던지자. Guide : UI 개발이 아니라면 메시지는 오직 디버깅을 위한 것이다. 예외의 메시지는 사용자에게 보여주기 적당하지 않다. 메시지의 목적은 시스템 개선 사용자에게 보여주려면, 다국어도 고려해야 하고 상황에 종속적일 수 있다. 예외의 메시지를 작성 시 사용자가 볼지 모른다는 우려할 필요도 없고, 시간 낭비도 없다. 예외 로그 관련 예외가 처리되었으면 반드시 로그를 남겨라 정보를 누락하지 말고 로그로 남겨라. Guide : 예외 로그를 남길 때는 모든 정보를 남겨라. Stack trace를 포함 Guide : 예외 로그 출력은 정해진 곳에서만 한다. 아무 곳에서 남기면 로그가 중복된다.\n외부와의 인터페이스\n→ 여기서도 안 남기면 로그가 남을 지 보장하지 못한다.\nGuide : 로그 레벨의 의미 Debug\n디버깅을 위한 목적 (입력 값, 반환 값 등) 아직도 Debug로 로그를 출력할 필요가 있다면 아직 안정화가 안된 것 Info\n시스템 동작에 대한 정보를 제공한다. Warn\n현재 운영에는 문제가 없지만, 문제가 될 수 있는 사항\n예외는 아니지만 알려주어야 한다 싶을 때\n→ ex) 설정 값을 읽었지만 사용되지 않았다.\nError\n시스템 운영에 문제가 있을 만한 사항 보통 예외를 잡아서 정상 처리한 경우 Fatal\n시스템 운영이 불가능한 경우 보통 예외가 발생하고, 정상 처리 못한 경우 ","link":"https://ch-yang1273.github.io/posts/java/2022-12-08-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%A0%95%EB%A6%AC-1%EC%9E%84%EB%8F%84%ED%98%95/2022-12-08-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%A0%95%EB%A6%AC-1%EC%9E%84%EB%8F%84%ED%98%95/","section":"posts","tags":["Exception"],"title":"예외 처리 가이드 - 1 (임도형)"},{"body":"","link":"https://ch-yang1273.github.io/tags/book/","section":"tags","tags":null,"title":"book"},{"body":"","link":"https://ch-yang1273.github.io/categories/database/","section":"categories","tags":null,"title":"Database"},{"body":"3장. 데이터베이스 시스템 스키마 데이터 구조와 제약 조건을 정의\nExample)\n저장된 값 = 인스턴스\n시스템 카탈로그 (= 데이터 사전, 시스템 데이터베이스) 저장되는 데이터에 관한 정보를 저장하는 곳 데이터 정의어 (DDL) - Difinition 데이터 조작어 (DML) - Manipulation 데이터 제어어 (DCL) - Control 4장. 데이터 모델링 데이터 모델링 현실 세계의 데이터를 컴퓨터 세계의 데이터베이스로 옮기는 변환 과정 E-R Model (개체-관계 모델) Entitiy-Relationship Model Entity (개체) 저장할만한 가치가 있는 요소 개체 타입 → 고객(이름, 주소, 연락처, 적립금) 개체 인스턴스 : 개체를 구성하는 속성이 실제 값을 가짐으로써 실체화 된 개체 개체 집합 : 개체 인스턴스의 모음 데이터베이스는 개체 집합을 관리한다. 속성 (Attribute) 개체가 갖는 고유 특성 데이터의 가장 작은 논리적 단위 관계 (Relationship) 개체 간 맺고 있는 연관성 (Mapping) Mapping cadinality (매핑 카디널리티) 연관성을 맺고 있는 상대 개체 집합의 인스턴스 개수 일대일, 일대다, 다대다 데이터베이스 스키마 데이터베이스의 논리적 구조 계층 데이터 모델, 네트워크 데이터 모델, 관계 데이터 모델 5장. 관계 데이터 모델 attribute (속성) : 열\ntuple (투플) : 행\ndomain (도메인) : 속성 하나가 가질 수 있는 모든 값의 집합\nreation (릴레이션)\n모든 릴레이션은 테이블이지만, 모든 테이블은 릴레이션이 아니다.\n테이블이 릴레이션이 되기 위해서는 테이블의 행들이 개체에 대한 데이터를 저장해야하고, 테이블들의 열이 그 개체들의 특성에 대한 데이터를 저장해야 한다. 릴레이션은 한 열의 모든 값들은 동일한 종류여야 한다.\n정규화를 만족하는 테이블이 릴레이션이겠네\n다른 해석으로는 “릴레이션은 추상적 개념이고 테이블은 구체적인 표현이라고 볼 수 있다.”\n릴레이션은 릴레이션 스키마와 릴레이션 인스턴스로 구성되어 있다.\ndegree (차수) : 하나의 릴레이션에서 속성의 전체 개수\ncardinality (카디널리티) : 하나의 릴레이션에서 투플의 전체 개수\n릴레이션의 특성 투플의 유일성 투플의 무순서 속성의 무순서 속성의 원자성 : 하나의 속성은 여러 개의 값을 가질 수 없다. 키의 종류 슈퍼키, 후보키, 기본키, 대체키, 외래키 무결성 제약조건 개체 무결성 제약조건 : 기본키는 널 값을 가질 수 없다.\n참조 무결성 제약조건 : 외래키는 참조할 수 없는 값을 가질 수 없다.\n→ 투플을 수정/삭제하는 연산은 “참조 무결성 제약조건”을 위반하지 않는 경우에만 수행한다.\n7장. 데이터베이스 언어 SQL SQL : Structured Query Language SQL은 연습하는 걸로… 9장. 정규화 정규화의 개념과 이상 현상 데이터베이스를 설계한 후 설계 결과물을 검증하기 위해 사용하기도 한다. 정규화는 이상 현상이 발생하지 않도록, 릴레이션을 분해하는 과정이다. 이상현상의 종류 (책의 예시를 다시 보는 것이 좋을 것 같다) 삽입 이상 : 새 데이터를 삽입하기 위해 불필요한 데이터도 함께 삽입해야 하는 문제 갱신 이상 : 중복 투플 중 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제 삭제 이상 : 투플을 삭제하면 꼭 필요한 데이터까지 함께 삭제되는 데이터 손실의 문제 함수 종속 하나의 릴레이션을 구성하는 속성들의 부분 집합을 X와 Y라 할 때,\nX 값에 따라 Y 값이 결정되면 “Y가 X에 함수적으로 종속되어 있다” (X→Y)라고 한다.\nX: 결정자, Y: 종속자\n기본적으로 릴레이션의 속성들은 기본키에 함수적으로 종속되어 있다.\n함수 종속 관계를 판단할 때는, 현재 시점의 데이터만으로 판단하면 안되고 속성 자체가 갖는 특성과 의미를 기반으로 판단해야 한다.\n완전 함수 종속 : X→Y 관계에서, Y가 속성 집합 X 전체에 종속되어 있음 (일반적인 함수 종속)\n부분 함수 종속 : X→Y 관계에서, Y가 속성 집합 X의 일부분에도 종속되어 있음\n정규화의 개념과 정규형의 종류 이상 현상이 발생하지 않는 올바른 릴레이션으로 만들어나가는 과정을 정규화(Normalization)라고 한다.\n제 1정규형\n릴레이션에 속한 모든 속성의 도메인이 원자 값으로만 구성되어 있으면 제 1정규형에 속한다. 제 2정규형\n기본키가 아닌 모든 속성이 기본키에 완전 함수 종속되면 제 2정규형에 속한다. 제 3정규형\n기본키가 아닌 모든 속성이 기본키에 이행적 함수 종속이 되지 않으면 제 3정규형에 속한다. X→Y, Y→Z 관계가 만족하면 논리적으로 X→Z가 성립하는데, 이때 Z가 X에 이행적으로 함수 종속되었다고 한다. BCNF형 (Boyce/Codd Normal Form : 보이스/코드 정규형)\n릴레이션의 함수 종속 관계에서 모든 결정자가 후보키이면 보이스/코드 정규형에 속한다. 강한 제 3정규형 (Strong 3NF)이라고도 한다. 이 내용도 이행적 함수 종속과 비슷한 내용으로 보이는데, 예시를 보면서 하는 게 이해하기 좋겠다. 10장. 회복과 병행 제어 트랜잭션의 개념 트랜잭션 (transaction) : 작업 하나를 수행하는 데 필요한 데이터베이스의 연산들을 모아놓은 것 데이터베이스에서 논리적인 작업의 단위가 된다. 장애가 발생했을 때 데이터를 복구하는 작업의 단위도 된다. 트랜잭션의 특성 트랜잭션의 네 가지 특성의 영단어 첫 자를 따서 ACID 특성이라고 한다. 원자성, 일관성, 격리성, 지속성 트랜잭션의 연산 commit, rollback 회복 병행 제어 ","link":"https://ch-yang1273.github.io/notes/database/2022-06-06-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B0%9C%EB%A1%A0%EC%A0%95%EB%A6%AC/2022-06-06-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B0%9C%EB%A1%A0%EC%A0%95%EB%A6%AC/","section":"notes","tags":["book"],"title":"데이터베이스 개론(정리)"},{"body":"예제 1 @Test 2 public void 중복_회원_예외() throws Exception { 3 //Given 4 Member member1 = new Member(); 5 member1.setName(\u0026#34;spring\u0026#34;); 6 7 Member member2 = new Member(); 8 member2.setName(\u0026#34;spring 1\u0026#34;); // 같은 이름으로 중복 회원가입 9 10 //When 11 12 memberService.join(member1); 13 IllegalStateException e = assertThrows(IllegalStateException.class, 14 () -\u0026gt; memberService.join(member2));//예외가 발생해야 한다. 15 //assertThat(e.getMessage()).isEqualTo(\u0026#34;이미 존재하는 회원입니다.\u0026#34;); 16 } assertThrows( 발생해야 할 Exception, 검사할 람다식); Exception가 발생하지 않아도, 예상되지 않은 Exception이 발생해도 Test가 Fail 난다. ","link":"https://ch-yang1273.github.io/notes/test/2022-02-26-junit5assertthrows/","section":"notes","tags":["test"],"title":"JUnit5:assertThrows"},{"body":"","link":"https://ch-yang1273.github.io/tags/test/","section":"tags","tags":null,"title":"test"},{"body":"","link":"https://ch-yang1273.github.io/categories/test/","section":"categories","tags":null,"title":"test"},{"body":"","link":"https://ch-yang1273.github.io/tags/java/","section":"tags","tags":null,"title":"Java"},{"body":" null 체크를 편하게 하기 위한 클래스이다.\n만약 null 반환하는 메소드가 있다면 아래 예제와 같이 null 체크를 한다.\n1Member member = memberRepository.findById(id); 2if (member != null) { 3 if (member.isAdmin()) { 4 member.addAdminPermissions(); 5 } else { 6 member.addDefaultPermissions(); 7 } 8} 하지만 Optional 객체로 감싸서 반환하면 아래와 예제와 같이 변경할 수 있다.\n1/** 2 * HashMap의 get은 찾는 값이 없으면 null을 반환하는 메소드다. 3 */ 4////////////////////////////////////////////////////////////////////////////// 5// Optional 객체로 감싸서 반환하는 메소드 예제 6private static Map\u0026lt;Long, Member\u0026gt; store = new HashMap\u0026lt;\u0026gt;(); 7 8public Optional\u0026lt;Member\u0026gt; findById(Long id) { 9 //return store.get(id); 10 return Optional.ofNullable(store.get(id)); //Optional으로 감싸서 반환한다. 11} 12////////////////////////////////////////////////////////////////////////////// 13 14Optional\u0026lt;Member\u0026gt; memberOptional = memberRepository.findById(id); 15memberOptional.ifPresent(member -\u0026gt; { 16 if (member.isAdmin()) { 17 member.addAdminPermissions(); 18 } else { 19 member.addDefaultPermissions(); 20 } 21}); → 람다식이 쓰였다.\nOptional 객체를 뜯어보자. Optional 객체는 멤버객체로 value하나만 갖고 있는 클래스이다.\n“Optional 객체의 value로 들어온 객체가 null 인가 아닌가”를 사용한다.\nOptional 객체의 ifPresent 메소드는 아래와 같이 생겼다.\nConsumer 인터페이스는 아래와 같이 생겼다.\nConsumer는 accept 메소드 하나만 갖는 인터페이스이다.\n→ 이런 인터페이스는 람다식을 받을 때 많이 사용한다.\n→ 람다식은 익명이너클래스를 만든다.\n→ 그래서 람다식은 Consumer를 구현한 클래스로 ifPresent 메소드의 인자로 들어간다.\n그럼 다시 위의 예제를 살펴봅시다 1Optional\u0026lt;Member\u0026gt; memberOptional = memberRepository.findById(id); 2memberOptional.ifPresent(member -\u0026gt; { 3 if (member.isAdmin()) { 4 member.addAdminPermissions(); 5 } else { 6 member.addDefaultPermissions(); 7 } 8}); findById(id) 메소드는 null이 될 수도 있는 반환 값을 Optional 객체로 감싸서 반환한다.\n→ 이 반환 값은 Optional 객체의 value 멤버객체가 된다.\nifPresent는 memberOptional (Optional)객체가 null이 아닌 객체를 감싸고 있으면 실행한다.\n→ 람다식으로 실행되는 메소드는 아래가 되겠다.\n1void accept(Member member) 2{ 3\tif (member.isAdmin()) { 4\tmember.addAdminPermissions(); 5\t} else { 6\tmember.addDefaultPermissions(); 7\t} 8} 위 예제는 예쁘지 않으니 변경 1Optional\u0026lt;Member\u0026gt; memberOptional = memberRepository.findById(id); 2memberOptional.ifPresent(member -\u0026gt; { 3 if (member.isAdmin()) { 4 member.addAdminPermissions(); 5 } else { 6 member.addDefaultPermissions(); 7 } 8}); → memberOptional 변수를 받지말고 바로 ifPresent를 호출\n1memberRepository.findById(id) 2\t.ifPresent(member -\u0026gt; { 3\tif (member.isAdmin()) { 4\tmember.addAdminPermissions(); 5\t} else { 6\tmember.addDefaultPermissions(); 7\t} 8\t}); ","link":"https://ch-yang1273.github.io/posts/java/2022-02-24-optional-%EA%B0%9D%EC%B2%B4/2022-02-24-optional-%EA%B0%9D%EC%B2%B4/","section":"posts","tags":["Java"],"title":"Optional 객체"},{"body":"","link":"https://ch-yang1273.github.io/tags/c#/","section":"tags","tags":null,"title":"c#"},{"body":"1 : GetNumericValue() 1using System; 2 3namespace Example 4{ 5 class Conversion 6 { 7 static void Main(string[] args) 8 { 9 char Character = \u0026#39;9\u0026#39;; 10 Console.WriteLine(\u0026#34;The character is: \u0026#34; + Character); 11 int integer = (int)Char.GetNumericValue(Character); 12 Console.WriteLine(\u0026#34;The integer is: {0}\u0026#34;, integer); 13 } 14 } 15} 2: ASCII 1using System; 2 3namespace Example 4{ 5 class Conversion 6 { 7 static void Main(string[] args) 8 { 9 char Character = \u0026#39;9\u0026#39;; 10 Console.WriteLine(\u0026#34;The character is: \u0026#34; + Character); 11 int integer = Character - \u0026#39;0\u0026#39;; 12 Console.WriteLine(\u0026#34;The integer is: {0}\u0026#34;, integer); 13 } 14 } 15} !!3: Int32.Parse() 1using System; 2 3namespace Example 4{ 5 class Conversion 6 { 7 static void Main(string[] args) 8 { 9 char Character = \u0026#39;9\u0026#39;; 10 Console.WriteLine(\u0026#34;The character is: \u0026#34; + Character); 11 int integer = int.Parse(Character.ToString()); 12 Console.WriteLine(\u0026#34;The integer is: {0}\u0026#34;, integer); 13 } 14 } 15} 4: GetDecimalDigitValue() 1using System; 2using System.Globalization; 3 4namespace Example 5{ 6 class Conversion 7 { 8 static void Main(string[] args) 9 { 10 char Character = \u0026#39;9\u0026#39;; 11 Console.WriteLine(\u0026#34;The character is: \u0026#34; + Character); 12 int integer = CharUnicodeInfo.GetDecimalDigitValue(Character); 13 Console.WriteLine(\u0026#34;The integer is: {0}\u0026#34;, integer); 14 } 15 } 16} 참고\nhttps://www.delftstack.com/ko/howto/csharp/how-to-convert-character-to-integer-in-csharp/\n","link":"https://ch-yang1273.github.io/notes/c-lang/2021-06-02-char%EB%A5%BCint%EB%A1%9C%EB%B3%80%ED%99%98/2021-06-02-char%EB%A5%BCint%EB%A1%9C%EB%B3%80%ED%99%98/","section":"notes","tags":["c#"],"title":"C# char를 int로 변환"},{"body":"Tools Just Color Picker : Screen 상에서 색상 RGB 값 따는 프로그램 Form1 StartPosition : CenterScreen\n폼이 처음 나타날 때 해당 폼의 위치를 결정 AutoScaleMode : None\n화면 해상도나 글꼴이 변경될 때 폼이나 컨트롤의 크기가 조정되는 방식을 결정합니다. 실행 환경 변경 시 레이아웃이 깨지는 문제를 방지할 수 있다. Dpi : 디스플레이 해상도를 기준으로 크기를 제어합니다. 일반적인 해상도는 96 및 120DPI입니다. Font : 클래스에서 사용하는 글꼴(일반적으로 시스템 글꼴)의 크기를 기준으로 크기를 제어합니다. Inherit : 클래스의 부모 크기 조정 모드에 따라 크기를 제어합니다. 부모가 없는 경우 자동 크기 조정을 사용하지 않습니다. None : 자동 크기 조정을 사용하지 않습니다. Font : 뭐든 정하고 시작 (기본 폰트는 아니지만 Noto Sans 추천이 많다.)\nFormBorderStyle : None\n폼의 테두리 및 제목 표시줄의 모양과 동작을 나타냅니다. None이 예쁘기는 한데 불편하니까 default라기 보다는 상황에 따라 설정 None으로 변경하면 종료버튼이나 사이즈 조절 버튼이 사라져서 만들어 줘야함 ","link":"https://ch-yang1273.github.io/notes/c-lang/2021-05-05-c-sharp%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8defaultsetting/2021-05-05-c-sharp%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8defaultsetting/","section":"notes","tags":["c#"],"title":"C# 프로젝트 Default Setting"},{"body":"","link":"https://ch-yang1273.github.io/tags/c/","section":"tags","tags":null,"title":"c"},{"body":"\r설치 위치 : http://mingw-w64.org/doku.php\nArchitecture i686 : 32bits x86_64 : 64bits Threads posix win32 Exception SEH : 훨씬 더 효율적이지만 호환성에 문제가 있는 것으로 보인다. SEH를 사용하지 않는 라이브러리를 사용할 때 문제가 있다. 이걸 대부분 쓰시네. SJLJ : 여러 아키텍처에서 광범위한 호환성을 보인다. SJLJ 예외는 C 라이브러리를 포함한 다른 예외 처리 시스템을 사용하는 라이브러리를 통해 발생할 수 있다. 하지만 성능이 저하된다. 코드에 관한 실제 차이점은 없고 전환도 쉽다. 걱정하지 마라. The file has been downloaded incorrectly! 에러 해결 참고\nThe file has been downloaded incorrectly! 에러 해결\n→ https://m.blog.naver.com/kh2un/222037244807\n환경 변수 편집\n→ https://blog.naver.com/dlgus0828/222199698928\n","link":"https://ch-yang1273.github.io/notes/c-lang/2021-03-09-gcc%EC%84%A4%EC%B9%98-mingw/2021-03-09-gcc%EC%84%A4%EC%B9%98-mingw/","section":"notes","tags":["c"],"title":"GCC 설치 (MinGW)"},{"body":"1. TableLayoutPanel 2. Panel TableLayoutPanel 으로 구도 잡고 위에 Panel 올려줘야 도구(controller? 컴포넌트?)들 올라감 재생버튼같은거 달려있는데 부모 컨테이너에 도킹 뭐지? 도킹이 뭐지? 3. 도킹 TableLayoutPanel 에 Panel 놓고 도킹하니까 쫙 퍼지면서 Layout크기만큼 쭉 커진다. ","link":"https://ch-yang1273.github.io/notes/c-lang/2020-10-21-c-sharp-panel/2020-10-21-c-sharp-panel/","section":"notes","tags":["c#"],"title":"C# panel"},{"body":"※ 상단바 색이 마음에 안들어서 Black으로 하려한다 1. Form1 속성 탭에서 FormBorderStyle → Sizable에서 None로 변경 2. TableLayoutPanel으로 상단바를 대신할 지역 구역 구분 3. 세개의 마우스 이벤트 추가 MouseDown\n1/*눌렀을 때 움직이도록 하기 위한 bool 변수*/ 2g_isMove = true; 3/*눌렀을 때의 위치를 저장하기 위한 Point 객체*/ 4g_fPt = new Point(e.X, e.Y); MouseUp\n1/*떼었을 때 움직이지 않도록*/ 2g_isMove = false; MouseMove\n1if(g_isMove \u0026amp;\u0026amp; (e.Button \u0026amp; MouseButtons.Left) == MouseButtons.Left) 2{ 3\tLocation = new Point(this.Left - (g_fPt.X - e.X), this.Top - (g_fPt.Y - e.Y)); 4} 4. Close 버튼 추가 클릭 이벤트\n1this.Close(); ","link":"https://ch-yang1273.github.io/notes/c-lang/2020-10-21-%EC%83%81%EB%8B%A8%EB%B0%94%EC%97%86%EC%95%A0%EA%B8%B0/2020-10-21-%EC%83%81%EB%8B%A8%EB%B0%94%EC%97%86%EC%95%A0%EA%B8%B0/","section":"notes","tags":["c#"],"title":"C# 상단바 없애기"},{"body":"","link":"https://ch-yang1273.github.io/tags/convention/","section":"tags","tags":null,"title":"convention"},{"body":"LOCAL 함수, LOCAL 전역변수 모듈 내부에서만 사용되는 함수, 전역변수는 static으로 정의하여 다른 모듈이 직접 사용할 수 없게 함\n→ static LOCAL로 표현하던데 규칙이 있나? 좋은 것 같음.\n1/*모든 \u0026#39;(\u0026#39; 앞은 붙임*/ 2for(~) 3if(~) 4switch(~) 5 6/*함수의 \u0026#39;{\u0026#39; 는 내림*/ 7void func(~) 8{ 9} 10 11/*for, if, switch 문의 \u0026#39;{\u0026#39; 도 내림*/ 12for(~) 13{ 14} 15 16if(~) 17{ 18} 19 20/* if문 한 줄 실행 문 */ 21if(~) { } 식별자 이름 작성 규칙 모듈의 전역 변수 이름 짓기\n→ g_\u0026lt;전역변수이름\u0026gt;\n루프 작성 기본 for 문 format 1/*\u0026#39;{\u0026#39;*/ 2uint32_t lo_x; /*Type은 unsigned int 형, 따로 빼서 선언*/ 3for(lo_x = 0; lo_x \u0026lt; 10; lo_x++) 4{ 5\t/* 6\t* for 다음 연산자하고 피연산자도 모두 띄움 (misra c 2012 예문들이 모두 이 format임) 7\t* \u0026#39;;\u0026#39; 전은 붙이고 후는 띄움 8\t*/ 9} unsigned int 타입의 카운터를 사용\n1unsigned int i 2for(i = 0; i \u0026lt; 10; i++) 3{ 4\t; 5} 변경 전\n1uint32_t i; /*Type은 unsigned int 형이면 되고, 따로 빼서 선언*/ 2for(i = 0; i \u0026lt; 10; i++) 3{ 4\t/* 5\t* for 다음 \u0026#39;(\u0026#39;은 띄우고 연산자하고 피연산자도 모두 띄움 (misra c 2012 예문들이 모두 이 format임) 6\t* \u0026#39;;\u0026#39; 전은 붙이고 후는 띄움 7\t*/ 8} 9 10for(i = 0; i \u0026lt; 10; i++) { ; } 조건문 작성 기본 if 문 format\n1/*misra 에서는 if( i \u0026gt; MAX ) 지만 싫음... if ( () ) 처럼 \u0026#39;(\u0026#39; 겹칠 때만 띄우자*/ 2if(i \u0026gt; MAX) 3{ 4} 5else if(p == NULL) 6{ 7} 8else { NOP(); } 함수작성 기본 함수 format\n1/*함수 이름 뒤 붙이고 \u0026#39;(\u0026#39;, misra는 파라미터들은 ( int para1 ... ) 이던데 나는 붙이는 것을 고수하겠음. 이게 예쁨*/ 2void func(int para1, char para2) 3{ 4\tNOP(); 5} No Operation : NOP() 아무것도 하지 않음을 표시함 1#define NOP() asm(\u0026#34;NOP\u0026#34;) /*MPU의 1cycle Delay 와 같다고 함*/ 2-\u0026gt; spc560d에서는 이거 쓸 때 먹통 됐음. 3 4... 5else { NOP(); } 6 7/*misra 는 아래의 format을 사용하지만 위의 No Operation format이 눈에 잘 들어오는 것 같음*/ 8else 9{ 10\t; /*;는 optional 이라고 함*/ 11} 배열 매개변수 void func(int32_t array[3]); 사용해도 되는데 매개변수가 잘 들어와야 함 return 값을 사용하지 않을 때 return 값이 void가 아니면 아래와 같이 작성합시다. return 값을 사용하지 않는다는 것을 명시(misra) 1void func() 2{ 3\t(void)printf(\u0026#34;hello\u0026#34;); 4} 5 6(void)func(); ","link":"https://ch-yang1273.github.io/notes/c-lang/2020-09-24-c%EC%96%B8%EC%96%B4%EC%BD%94%EB%94%A9%EC%BB%A8%EB%B2%A4%EC%85%98/2020-09-24-c%EC%96%B8%EC%96%B4%EC%BD%94%EB%94%A9%EC%BB%A8%EB%B2%A4%EC%85%98/","section":"notes","tags":["c","convention"],"title":"C언어 코딩 컨벤션"},{"body":"임베디드 시스템 개발 환경 크로스 컴파일러 고급 언어로 작성된 소스 코드를 해당 Target의 어셈블리 코드로 번역하는 것 크로스 툴체인 크로스 컴파일러를 포함한 실행 파일을 생성하기 위한 여러가지 요소들을 포함하는 소프트웨어 크로스 컴파일러, 어셈블러, 링커, 라이브러리 등으로 구성 라이브러리의 종류 정적 라이브러리 - 용량이 큼 공유 라이브러리 - .o 동적 라이브러리 - .so C Entry point C Entry point : 프로그램이 시작하는 진입 위치\nAssembly어를 통해 작성 가능함.\nex) Main(), main() 등\n일반적으로 crt0.S (C-runtime 0), init.S, startup.S 파일 이름이 사용된다.\nStartup Code (부트코드)\nC 프로그램이 가능하도록 main() 함수 호출 전에 하드웨어 설정, 메모리 설정 등의 작업을 수행하는 부분\n운영체제가 존재할 경우 운영체제 초기화 이전에 수행\n기본 자료형 보다가 이상한 것 봤는데... RVDS 에서는 char 타입은 default로 unsigned char 라고 하는데? RVDS 가 뭐지??\nRVDS : ARM Developer suite\n나중에 알아봅시다...\n어셈블 코드 작성도 가능하네 1asm{ /* inline assemble code */ } 2__asm{ /* inline assemble code */ } 3#asm 4\t?? 이건 잘 모르겠다 5#endasm Stack memory stack 영역 설정도 할 수 있는 것 같은데 SVC 모드에서 설정한다함.. SVC 모드 뭐야? 포인터 1 까먹고 있었는데 포인터의 크기는 벡터 값이다. 포인터는 타입이 있어서 메모리에 접근할 때 크기 정보를 보고 접근한다. int*, char* 크기가 다르지. (옛날에 공부한 것 다시 찾아봅시다) 포인터 2 1/*포인터가 가리키는 int 형 변수의 값 변경 불가 but 포인터가 다른 int 형 변수를 포인팅 가능*/ 2const int * pi; 3/*포인터가 가리키는 int 형 변수의 값 변경 가능 but 포인터가 다른 int 형 변수를 포인팅 불가능*/ 4int * const pi; 포인터 3 이중포인터\n→ (int ) ptr; 은 어따 쓸 지 잘 모르겠다\n→ char** 는 동적 문자열 배열 처리 시 활용\n#pragma 정리 한번 합시다. 책에 있는 것도 참고하고 인터넷도 찾아보고 코드 크기 줄이기 표준 라이브러리의 사용은 피하고 필요한 경우 직접 작성해서 사용 → 덩치가 매우 큼\nRun-Time 시 변하지 않는 변수는 const 키워드를 사용해 상수화한다.\n구조체는 함수의 리턴, 인수로 사용하지 않고 포인터로 대체한다.\n구조체이 경우 전체를 스택에 복사하므로 포인터를 사용해 메모리 사용량을 줄인다.\nDMA 제어를 통해 성능 향상 높은 속도의 데이터 전송 장치에서 유용함. 프로세서가 데이터 전송 동작을 처리하는데 자원을 소모하지 않게 해줌 전처리기 ! # 연산자 : 문자열 변환 연산자\n! ##연산자 : 토큰 병합 연산자\n방어적 프로그래밍 코드가 올바르게 작동할 것이라는 가정을 하면 안된다\n자기 자신도 믿지 말자\n복잡한 코드를 만들지 말고 직관적으로 해석 가능한 코드를 작성한다\n함수의 독립성을 최대한 보장한다.\n일관된 코딩 룰을 적용하여 코딩 시 실수를 줄인다.\n→ 모든 변수는 선언과 동시에 초기화한다.\nTEST CASE를 활용해 가능한 많은 경우의 수를 테스트하고 검증해야 함.\n발생한 예외 사항들의 처리 방법을 정의해야 한다.\n고급 C코드 디버깅 기법 CRT 함수의 제약으로 assert() 대신 InputInspection() 매크로를 직접 작성한다.\n1#define InputInspection(condition)\\\\ 2{\\\\ 3\tif( (condition) == 0)\\\\ 4\t{ 5\t/*발생한 파일과 라인 넘버를 LCD에 출력*/ 6\tUart_Printf(\u0026#34;Occur input error at %s:%d\\\\n\u0026#34;, __FILE__, __LINE__);\\\\ 7\tInfiniteLoop();\\\\ 8\t}\\\\ 9} 10 11사용예) 12#ifdef DEBUG //디버깅 시에만 컴파일함 13\tInputInpection(a\u0026gt;2); 14#endif #error, #line사용법 찾아보시고\n미리 정의된 매크로를 활용하면 디버깅에 좋다\n1/*정의되지 않은 매크로가 있을 수도 있으니 확인 후 사용한다.*/ 2__DATE__ : 최종 컴파일 시점의 날짜를 나타내는 문자열 3__TIME__ : 최종 컴파일 시점의 시간을 나타내는 문자열 4__FILE__ : 현재 소스 파일의 전체 경로를 나타내는 문자열 5__LINE__ : 매크로가 포함된 소스 코드의 줄 번호를 나타내는 10진법 정수 6__STDC__ : ANSI C 표준을 따르면 1, 이 외에는 정의되지 않음 7__TIMESTAMP__ : 현재 소스 파일의 마지막 수정된 날짜, 시간을 포함하는 문자열 최적화 정도 정의 옵션 -On (ex. -O0 : 최적화를 하지 않는다(디폴트), -O1, -O2 : 최대한으로 최적화)\n→ 최적화 수준이 낮을 수록 -g 옵션과 함께 디버깅 시 최적의 뷰를 제공한다.\n-Ospace : 이미지 사이즈를 줄이는 최적화 옵션(디폴트)\n-Otime : 실행 시간을 줄이는 최적화 옵션, -Ospace와 동시에 사용할 수 없다.\n-Ono_inline : 함수 인라인할 수 없게함.\n-Oinline : 함수를 인라인할 수 있게 함.(디폴트)\nautoinline, no_autoinline 알아서 찾아보고\nscatter-loading 뭔지 모르겠고 궁금할 때 찾아보기 ","link":"https://ch-yang1273.github.io/notes/c-lang/2020-09-14-arm%EA%B8%B0%EB%B0%98c%EC%BD%94%EB%93%9C%EC%B5%9C%EC%A0%81%ED%99%94/2020-09-14-arm%EA%B8%B0%EB%B0%98c%EC%BD%94%EB%93%9C%EC%B5%9C%EC%A0%81%ED%99%94/","section":"notes","tags":["book"],"title":"ARM 기반 C코드 최적화"},{"body":"※ 시리얼 출력 위치를 직접 연결하기 위함(firmware)\n시험 보드 spc560d 코드 utile.c\n1#include \u0026#34;stdarg.h\u0026#34; /*va_list, va_start, va_end vsprintf ...*/ 2#include \u0026lt;stdio.h\u0026gt; 3//#include \u0026lt;stdint.h\u0026gt; /*uint32_t, uint8_t etc...*/ 4#include \u0026lt;errno.h\u0026gt; 5#include \u0026lt;limits.h\u0026gt; 6//#include \u0026lt;string.h\u0026gt; 7 8#include \u0026#34;components.h\u0026#34; 9 10#define UART_BUF_SIZE 256 11 12char uart_buf[UART_BUF_SIZE]; 13 14#define to_digit(c) ((c) - \u0026#39;0\u0026#39;) 15#define is_digit(c) ((unsigned)to_digit(c) \u0026lt;= 9) 16#define to_char(n) ((n) + \u0026#39;0\u0026#39;) 17 18#define BUF 68 19 20#define ALT 0X001 21#define HEXPREFIX 0X002 22#define LADJUST 0X004 23#define LONGDBL 0X008 24#define LONGINT 0X010 25#define QUADINT 0X020 26#define SHORTINT 0X040 27#define ZEROPAD 0X080 28#define FPT 0X100 29 30//#define ULONG_MAX\t0xffffffff 31//#define LONG_MAX\t0x7fffffff 32//#define\tUQUAD_MAX\t0xffffffffffffffffULL 33#define QUAD_MAX\t0x7fffffffffffffffLL 34 35//typedef void* va_list; 36 37void custom_puts(const char *str); 38 39void *sbrk(size_t incr) { 40 extern uint8_t __heap_base__; 41 extern uint8_t __heap_end__; 42 static uint8_t *p = \u0026amp;__heap_base__; 43 static uint8_t *newp; 44 newp = p + incr; 45 46 if (newp \u0026gt; \u0026amp;__heap_end__) { 47 errno = ENOMEM; 48 return (void *)-1; 49 } 50 return p = newp; 51} 52 53int custom_printf(const char *format, ...) 54{ 55 int rc; 56 va_list ap; 57 58 va_start(ap, format); 59 60 rc = vsprintf(uart_buf, format, ap); 61 62 va_end(ap); 63 64 custom_puts(uart_buf); 65 66 return rc; 67} 68 69/*보드에 따라 이부분만 수정하면 됨. ifdef 로 짜는 것이 깔끔하겠다.*/ 70void custom_putc(char ch) 71{ 72\t//extern void uart_putc(char ch); 73\tuint8_t *spc_ch; 74\tuint8_t spc_ch_l[1] = {0}; 75\tspc_ch = spc_ch_l; 76 77\t*spc_ch = ch; 78 79\tsd_lld_write(\u0026amp;SD1, spc_ch, 1); 80\t//uart_putc(ch); 81 82\tif (ch == \u0026#39;\\n\u0026#39;) 83\t{ 84\t*spc_ch = \u0026#39;\\r\u0026#39;; 85\tsd_lld_write(\u0026amp;SD1, spc_ch, 1); 86\t} 87 88 //uart_putc(\u0026#39;\\r\u0026#39;); 89} 90 91void custom_puts(const char *str) 92{ 93 while(*str) 94 { 95 custom_putc(*str++); 96 } 97} 98 99#if 0 100/*utile -srt*****************************************************/ 101/* 102 * memcpy - Copy one area of memory to another 103 * @dest: Where to copy to 104 * @src: Where to copy from 105 * @count: The size of the area. 106 * 107 * You should not use this function to access IO space, use memcpy_toio() 108 * or memcpy_fromio() instead. 109 */ 110void *memcpy(void *dest, const void *src, size_t count) 111{ 112\tchar *tmp = dest; 113\tconst char *s = src; 114 115\t/* count 만큼 src 의 포인터를 이동하면 한바이트씩 dest로 복사. */ 116\twhile (count--) 117\t*tmp++ = *s++; 118\treturn dest; 119} 120 121void* memset(void *dest, int fillChar, unsigned int count) 122{ 123\tunsigned int i; 124\tfor (i = 0; i \u0026lt; count; i++) 125\t{ 126\t*((char*)dest + i) = fillChar; 127\t} 128\treturn dest; 129} 130 131int strlen(const uint8_t* str) 132{ 133\tint i = 0; 134\tfor(i = 0; i \u0026lt; 100; i++) 135\t{ 136\tif(str[i] == \u0026#39;\\0\u0026#39;) 137\t{ 138\treturn i; 139\t} 140\t} 141\treturn 0; 142} 143 144/* 145// * 반환 값 0: 문자열의 사이즈 측정에 문제가 있음 146 * 반환 값 1: 문자열의 사이즈 측정에 문제가 없음 147 */ 148uint8_t* reverseString(uint8_t* buf) 149{ 150\tint i = 0; 151\tuint8_t temp; 152\tuint8_t* s = buf; 153\tint s_size = strlen(s); 154 155\tif(s_size == 0) 156\t{ 157\treturn 0; 158\t} 159\telse 160\t{;} 161 162\tfor(i = 0; i \u0026lt; s_size/2; i++) 163\t{ 164\ttemp = s[i]; 165\ts[i] = s[(s_size - 1) - i]; 166\ts[(s_size - 1) - i] = temp; 167\t} 168\treturn buf; 169} 170 171/* 172 * val : ascii 문자열로 변환할 값 (unsigned) 173 * buf : 변환된 문자열 저장 위치 174 * radix : 진수 (예. 8, 10, 16) 175 */ 176uint8_t* itoa(uint32_t val, uint8_t * buf, uint32_t radix) 177{ 178\tuint8_t* p = buf; 179\tif(val == 0) 180\t{ 181\t*p++ = \u0026#39;0\u0026#39;; 182\t*p = \u0026#39;\\0\u0026#39;; 183\treturn buf; 184\t} 185\telse 186\t{;} 187 188\twhile(val) { 189\tif(radix \u0026lt;= 10) 190\t*p++ = (val % radix) + \u0026#39;0\u0026#39;; 191\telse { 192\tint t = val % radix; 193\tif (t \u0026lt;= 9) 194\t*p++ = t + \u0026#39;0\u0026#39;; 195\telse 196\t*p++ = t - 10 + \u0026#39;a\u0026#39;; 197\t} 198 199\tval /= radix; 200\t} 201 202\t*p = \u0026#39;\\0\u0026#39;; 203\treverseString(buf); 204\tif(buf == 0) 205\t{ 206\t//err 207\t} 208\telse 209\t{;} 210 211\treturn buf; 212} 213/*utile -end*****************************************************/ 214#endif 기록 stdarg.h, limits.h\nSPC5Studio 에서 C언어 표준 라이브러리 include 안해줘서 직접해줬음 (실행 파일 크기 14KB 에서 37KB)\n→ project - properties - C/C++ General - Paths and Stmbols 에서 include directory 추가\n→ C:\\SPC5Studio\\eclipse\\plugins\\com.st.tools.spc5.tools.gnu.gcc.ppcvle.win32_4.9.4.20190604105544\\toolchain\\powerpc-eabivle\\include (stdio.h 포함한 include dir 중 선택함)\n","link":"https://ch-yang1273.github.io/notes/c-lang/2020-09-02-c-printf-%EA%B5%AC%ED%98%84/2020-09-02-c-printf-%EA%B5%AC%ED%98%84/","section":"notes","tags":["c"],"title":"C printf 구현"},{"body":"","link":"https://ch-yang1273.github.io/categories/c/c#/","section":"categories","tags":null,"title":"c/c#"},{"body":"","link":"https://ch-yang1273.github.io/series/","section":"series","tags":null,"title":"Series"}]