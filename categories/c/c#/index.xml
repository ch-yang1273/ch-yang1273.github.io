<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c/c# on ych`s blog</title>
    <link>https://ch-yang1273.github.io/categories/c/c#/</link>
    <description>Recent content in c/c# on ych`s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><atom:link href="https://ch-yang1273.github.io/categories/c/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# char를 int로 변환</title>
      <link>https://ch-yang1273.github.io/notes/c-lang/2021-06-02-char%EB%A5%BCint%EB%A1%9C%EB%B3%80%ED%99%98/2021-06-02-char%EB%A5%BCint%EB%A1%9C%EB%B3%80%ED%99%98/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/notes/c-lang/2021-06-02-char%EB%A5%BCint%EB%A1%9C%EB%B3%80%ED%99%98/2021-06-02-char%EB%A5%BCint%EB%A1%9C%EB%B3%80%ED%99%98/</guid>
      <description>
        
          
            1 : GetNumericValue() 1using System; 2 3namespace Example 4{ 5 class Conversion 6 { 7 static void Main(string[] args) 8 { 9 char Character = &amp;#39;9&amp;#39;; 10 Console.WriteLine(&amp;#34;The character is: &amp;#34; + Character); 11 int integer = (int)Char.GetNumericValue(Character); 12 Console.WriteLine(&amp;#34;The integer is: {0}&amp;#34;, integer); 13 } 14 } 15} 2: ASCII 1using System; 2 3namespace Example 4{ 5 class Conversion 6 { 7 static void Main(string[] args) 8 { 9 char Character = &amp;#39;9&amp;#39;; 10 Console.
          
          
        
      </description>
    </item>
    
    <item>
      <title>C# 프로젝트 Default Setting</title>
      <link>https://ch-yang1273.github.io/notes/c-lang/2021-05-05-c-sharp%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8defaultsetting/2021-05-05-c-sharp%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8defaultsetting/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/notes/c-lang/2021-05-05-c-sharp%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8defaultsetting/2021-05-05-c-sharp%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8defaultsetting/</guid>
      <description>
        
          
            Tools Just Color Picker : Screen 상에서 색상 RGB 값 따는 프로그램 Form1 StartPosition : CenterScreen
폼이 처음 나타날 때 해당 폼의 위치를 결정 AutoScaleMode : None
화면 해상도나 글꼴이 변경될 때 폼이나 컨트롤의 크기가 조정되는 방식을 결정합니다. 실행 환경 변경 시 레이아웃이 깨지는 문제를 방지할 수 있다. Dpi : 디스플레이 해상도를 기준으로 크기를 제어합니다. 일반적인 해상도는 96 및 120DPI입니다. Font : 클래스에서 사용하는 글꼴(일반적으로 시스템 글꼴)의 크기를 기준으로 크기를 제어합니다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>GCC 설치 (MinGW)</title>
      <link>https://ch-yang1273.github.io/notes/c-lang/2021-03-09-gcc%EC%84%A4%EC%B9%98-mingw/2021-03-09-gcc%EC%84%A4%EC%B9%98-mingw/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/notes/c-lang/2021-03-09-gcc%EC%84%A4%EC%B9%98-mingw/2021-03-09-gcc%EC%84%A4%EC%B9%98-mingw/</guid>
      <description>
        
          
            설치 위치 : http://mingw-w64.org/doku.php
Architecture i686 : 32bits x86_64 : 64bits Threads posix win32 Exception SEH : 훨씬 더 효율적이지만 호환성에 문제가 있는 것으로 보인다. SEH를 사용하지 않는 라이브러리를 사용할 때 문제가 있다. 이걸 대부분 쓰시네. SJLJ : 여러 아키텍처에서 광범위한 호환성을 보인다. SJLJ 예외는 C 라이브러리를 포함한 다른 예외 처리 시스템을 사용하는 라이브러리를 통해 발생할 수 있다. 하지만 성능이 저하된다. 코드에 관한 실제 차이점은 없고 전환도 쉽다. 걱정하지 마라.
          
          
        
      </description>
    </item>
    
    <item>
      <title>C# panel</title>
      <link>https://ch-yang1273.github.io/notes/c-lang/2020-10-21-c-sharp-panel/2020-10-21-c-sharp-panel/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/notes/c-lang/2020-10-21-c-sharp-panel/2020-10-21-c-sharp-panel/</guid>
      <description>
        
          
            1. TableLayoutPanel 2. Panel TableLayoutPanel 으로 구도 잡고 위에 Panel 올려줘야 도구(controller? 컴포넌트?)들 올라감 재생버튼같은거 달려있는데 부모 컨테이너에 도킹 뭐지? 도킹이 뭐지? 3. 도킹 TableLayoutPanel 에 Panel 놓고 도킹하니까 쫙 퍼지면서 Layout크기만큼 쭉 커진다. 
          
          
        
      </description>
    </item>
    
    <item>
      <title>C# 상단바 없애기</title>
      <link>https://ch-yang1273.github.io/notes/c-lang/2020-10-21-%EC%83%81%EB%8B%A8%EB%B0%94%EC%97%86%EC%95%A0%EA%B8%B0/2020-10-21-%EC%83%81%EB%8B%A8%EB%B0%94%EC%97%86%EC%95%A0%EA%B8%B0/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/notes/c-lang/2020-10-21-%EC%83%81%EB%8B%A8%EB%B0%94%EC%97%86%EC%95%A0%EA%B8%B0/2020-10-21-%EC%83%81%EB%8B%A8%EB%B0%94%EC%97%86%EC%95%A0%EA%B8%B0/</guid>
      <description>
        
          
            ※ 상단바 색이 마음에 안들어서 Black으로 하려한다 1. Form1 속성 탭에서 FormBorderStyle → Sizable에서 None로 변경 2. TableLayoutPanel으로 상단바를 대신할 지역 구역 구분 3. 세개의 마우스 이벤트 추가 MouseDown
1/*눌렀을 때 움직이도록 하기 위한 bool 변수*/ 2g_isMove = true; 3/*눌렀을 때의 위치를 저장하기 위한 Point 객체*/ 4g_fPt = new Point(e.X, e.Y); MouseUp
1/*떼었을 때 움직이지 않도록*/ 2g_isMove = false; MouseMove
1if(g_isMove &amp;amp;&amp;amp; (e.Button &amp;amp; MouseButtons.Left) == MouseButtons.Left) 2{ 3	Location = new Point(this.
          
          
        
      </description>
    </item>
    
    <item>
      <title>C언어 코딩 컨벤션</title>
      <link>https://ch-yang1273.github.io/notes/c-lang/2020-09-24-c%EC%96%B8%EC%96%B4%EC%BD%94%EB%94%A9%EC%BB%A8%EB%B2%A4%EC%85%98/2020-09-24-c%EC%96%B8%EC%96%B4%EC%BD%94%EB%94%A9%EC%BB%A8%EB%B2%A4%EC%85%98/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/notes/c-lang/2020-09-24-c%EC%96%B8%EC%96%B4%EC%BD%94%EB%94%A9%EC%BB%A8%EB%B2%A4%EC%85%98/2020-09-24-c%EC%96%B8%EC%96%B4%EC%BD%94%EB%94%A9%EC%BB%A8%EB%B2%A4%EC%85%98/</guid>
      <description>
        
          
            LOCAL 함수, LOCAL 전역변수 모듈 내부에서만 사용되는 함수, 전역변수는 static으로 정의하여 다른 모듈이 직접 사용할 수 없게 함
→ static LOCAL로 표현하던데 규칙이 있나? 좋은 것 같음.
1/*모든 &amp;#39;(&amp;#39; 앞은 붙임*/ 2for(~) 3if(~) 4switch(~) 5 6/*함수의 &amp;#39;{&amp;#39; 는 내림*/ 7void func(~) 8{ 9} 10 11/*for, if, switch 문의 &amp;#39;{&amp;#39; 도 내림*/ 12for(~) 13{ 14} 15 16if(~) 17{ 18} 19 20/* if문 한 줄 실행 문 */ 21if(~) { } 식별자 이름 작성 규칙 모듈의 전역 변수 이름 짓기
          
          
        
      </description>
    </item>
    
    <item>
      <title>ARM 기반 C코드 최적화</title>
      <link>https://ch-yang1273.github.io/notes/c-lang/2020-09-14-arm%EA%B8%B0%EB%B0%98c%EC%BD%94%EB%93%9C%EC%B5%9C%EC%A0%81%ED%99%94/2020-09-14-arm%EA%B8%B0%EB%B0%98c%EC%BD%94%EB%93%9C%EC%B5%9C%EC%A0%81%ED%99%94/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/notes/c-lang/2020-09-14-arm%EA%B8%B0%EB%B0%98c%EC%BD%94%EB%93%9C%EC%B5%9C%EC%A0%81%ED%99%94/2020-09-14-arm%EA%B8%B0%EB%B0%98c%EC%BD%94%EB%93%9C%EC%B5%9C%EC%A0%81%ED%99%94/</guid>
      <description>
        
          
            임베디드 시스템 개발 환경 크로스 컴파일러 고급 언어로 작성된 소스 코드를 해당 Target의 어셈블리 코드로 번역하는 것 크로스 툴체인 크로스 컴파일러를 포함한 실행 파일을 생성하기 위한 여러가지 요소들을 포함하는 소프트웨어 크로스 컴파일러, 어셈블러, 링커, 라이브러리 등으로 구성 라이브러리의 종류 정적 라이브러리 - 용량이 큼 공유 라이브러리 - .o 동적 라이브러리 - .so C Entry point C Entry point : 프로그램이 시작하는 진입 위치
Assembly어를 통해 작성 가능함.
ex) Main(), main() 등
          
          
        
      </description>
    </item>
    
    <item>
      <title>C printf 구현</title>
      <link>https://ch-yang1273.github.io/notes/c-lang/2020-09-02-c-printf-%EA%B5%AC%ED%98%84/2020-09-02-c-printf-%EA%B5%AC%ED%98%84/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/notes/c-lang/2020-09-02-c-printf-%EA%B5%AC%ED%98%84/2020-09-02-c-printf-%EA%B5%AC%ED%98%84/</guid>
      <description>
        
          
            ※ 시리얼 출력 위치를 직접 연결하기 위함(firmware)
시험 보드 spc560d 코드 utile.c
1#include &amp;#34;stdarg.h&amp;#34; /*va_list, va_start, va_end vsprintf ...*/ 2#include &amp;lt;stdio.h&amp;gt; 3//#include &amp;lt;stdint.h&amp;gt; /*uint32_t, uint8_t etc...*/ 4#include &amp;lt;errno.h&amp;gt; 5#include &amp;lt;limits.h&amp;gt; 6//#include &amp;lt;string.h&amp;gt; 7 8#include &amp;#34;components.h&amp;#34; 9 10#define UART_BUF_SIZE 256 11 12char uart_buf[UART_BUF_SIZE]; 13 14#define to_digit(c) ((c) - &amp;#39;0&amp;#39;) 15#define is_digit(c) ((unsigned)to_digit(c) &amp;lt;= 9) 16#define to_char(n) ((n) + &amp;#39;0&amp;#39;) 17 18#define BUF 68 19 20#define ALT 0X001 21#define HEXPREFIX 0X002 22#define LADJUST 0X004 23#define LONGDBL 0X008 24#define LONGINT 0X010 25#define QUADINT 0X020 26#define SHORTINT 0X040 27#define ZEROPAD 0X080 28#define FPT 0X100 29 30//#define ULONG_MAX	0xffffffff 31//#define LONG_MAX	0x7fffffff 32//#define	UQUAD_MAX	0xffffffffffffffffULL 33#define QUAD_MAX	0x7fffffffffffffffLL 34 35//typedef void* va_list; 36 37void custom_puts(const char *str); 38 39void *sbrk(size_t incr) { 40 extern uint8_t __heap_base__; 41 extern uint8_t __heap_end__; 42 static uint8_t *p = &amp;amp;__heap_base__; 43 static uint8_t *newp; 44 newp = p + incr; 45 46 if (newp &amp;gt; &amp;amp;__heap_end__) { 47 errno = ENOMEM; 48 return (void *)-1; 49 } 50 return p = newp; 51} 52 53int custom_printf(const char *format, .
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
