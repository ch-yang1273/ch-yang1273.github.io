<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exception on ych`s blog</title>
    <link>https://ch-yang1273.github.io/tags/exception/</link>
    <description>Recent content in Exception on ych`s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 09 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ch-yang1273.github.io/tags/exception/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>예외와 로그 실용 가이드 - 2 (임도형)</title>
      <link>https://ch-yang1273.github.io/posts/java/2022-12-09-%EC%98%88%EC%99%B8%EC%99%80-%EB%A1%9C%EA%B7%B8-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C-2%EC%9E%84%EB%8F%84%ED%98%95/2022-12-09-%EC%98%88%EC%99%B8%EC%99%80-%EB%A1%9C%EA%B7%B8-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C-2%EC%9E%84%EB%8F%84%ED%98%95/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/posts/java/2022-12-09-%EC%98%88%EC%99%B8%EC%99%80-%EB%A1%9C%EA%B7%B8-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C-2%EC%9E%84%EB%8F%84%ED%98%95/2022-12-09-%EC%98%88%EC%99%B8%EC%99%80-%EB%A1%9C%EA%B7%B8-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C-2%EC%9E%84%EB%8F%84%ED%98%95/</guid>
      <description>
        
          
            참고 : Exception log practical_coding_guide, 예외와 로그 코딩 실용 가이드 항상 성가셨던 고민들 예외는 잡았는데, 로그를 남겨야 하나? 로그 레벨은? 어떤 예외 클래스로? 예외 메시지에는 어떤 값을? 예외의 로그를 어디서? 아무데나?
로그 중복
로그 누락
로그 위치가 고민되면 안된다. (이미 정해져 있어야 한다)
단순화하면, 예외가 발생한 이쪽과 저쪽(던짐)은 구분이 된다.
발생한 예외를 던지기 전에 로그를 남긴다. 정상 상황으로 처리한 곳에서 로그를 남긴다. 로그 레벨 - 애매한 상황 사용자의 입력이 잘못되어 발생한 예외 예외는 발생했지만, 정말 예외 상황은 아니다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>예외 처리 가이드 - 1 (임도형)</title>
      <link>https://ch-yang1273.github.io/posts/java/2022-12-08-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%A0%95%EB%A6%AC-1%EC%9E%84%EB%8F%84%ED%98%95/2022-12-08-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%A0%95%EB%A6%AC-1%EC%9E%84%EB%8F%84%ED%98%95/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ch-yang1273.github.io/posts/java/2022-12-08-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%A0%95%EB%A6%AC-1%EC%9E%84%EB%8F%84%ED%98%95/2022-12-08-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%A0%95%EB%A6%AC-1%EC%9E%84%EB%8F%84%ED%98%95/</guid>
      <description>
        
          
            참고 : 예외처리가이드 예외의 종류? 예측 가능한 예외
예측 가능하지 않은 예외
예측 가능한 예외 예측 가능한 만큼 처리 자체가 개발의 일부이다. Example 로그인이 실패했다. DB에 레코드가 없다. 파일을 찾을 수 없다. 예측 가능하지 않은 예외 버그 아니면 시스템 환경에 기인한다. 실시간 처리는 불가능하다. 대신 개선해야 한다. 예외 처리가 제대로 되지 않으면? 문제가 발생해도 로그를 보지 않는다. 로그가 중복되거나 누락 로그에 도움 되는 내용이 없다. 시스템 개선 한번 발생한 예측하지 못하는 상황이 다시 발생하지 않도록 하는 것
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
